<?php

declare(strict_types=1);

namespace Hypervel\Sentry\Logs;

use Monolog\Formatter\FormatterInterface;
use Monolog\Formatter\LineFormatter;
use Monolog\Handler\AbstractProcessingHandler;
use Sentry\Logs\LogLevel;
use Sentry\Monolog\CompatibilityProcessingHandlerTrait;
use Sentry\Severity;
use Throwable;

class LogsHandler extends AbstractProcessingHandler
{
    use CompatibilityProcessingHandlerTrait;

    /**
     * The formatter to use for the logs generated via handleBatch().
     */
    protected ?FormatterInterface $batchFormatter;

    public function handleBatch(array $records): void
    {
        $level = $this->level;

        // filter records based on their level
        $records = array_filter(
            $records,
            function ($record) use ($level) {
                return $record['level'] >= $level;
            }
        );

        if (! $records) {
            return;
        }

        // the record with the highest severity is the "main" one
        $record = array_reduce(
            $records,
            function ($highest, $record) {
                if ($highest === null || $record['level'] > $highest['level']) {
                    return $record;
                }

                return $highest;
            }
        );

        // the other ones are added as a context item
        $logs = [];
        foreach ($records as $r) {
            $logs[] = $this->processRecord($r);
        }

        if (! empty($logs)) {
            $record['context']['logs'] = (string) $this->getBatchFormatter()->formatBatch($logs);
        }

        $this->handle($record);
    }

    /**
     * Sets the formatter for the logs generated by handleBatch().
     */
    public function setBatchFormatter(FormatterInterface $formatter): self
    {
        $this->batchFormatter = $formatter;

        return $this;
    }

    /**
     * Gets the formatter for the logs generated by handleBatch().
     */
    public function getBatchFormatter(): FormatterInterface
    {
        if (! $this->batchFormatter) {
            $this->batchFormatter = new LineFormatter();
        }

        return $this->batchFormatter;
    }

    /**
     * @suppress PhanTypeMismatchArgument
     *
     * @param mixed $record
     */
    protected function doWrite($record): void
    {
        $exception = $record['context']['exception'] ?? null;

        if ($exception instanceof Throwable) {
            return;
        }

        \Sentry\logger()->aggregator()->add(
            // This seems a little bit of a roundabout way to get the log level, but this is done for compatibility
            self::getLogLevelFromSeverity(
                self::getSeverityFromLevel($record['level'])
            ),
            $record['message'],
            [],
            array_merge($record['context'], $record['extra'])
        );
    }

    private static function getLogLevelFromSeverity(Severity $severity): LogLevel
    {
        return match ($severity) {
            Severity::debug() => LogLevel::debug(),
            Severity::warning() => LogLevel::warn(),
            Severity::error() => LogLevel::error(),
            Severity::fatal() => LogLevel::fatal(),
            default => LogLevel::info(),
        };
    }
}
